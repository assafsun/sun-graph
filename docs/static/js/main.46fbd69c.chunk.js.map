{"version":3,"sources":["portal/ClippedDrawerAppBar/ClippedDrawerAppBar.tsx","SunGraph/models/graph.model.ts","SunGraph/utils/id.ts","SunGraph/layouts/customDagreLayout.ts","SunGraph/SunGraph.tsx","SunGraph/utils/viewDimensionsHelper.ts","portal/BasicGraph/BasicGraph.tsx","portal/DefaultGraph/DefaultGraph.tsx","portal/GettingStarted/GettingStarted.tsx","portal/AdvancedGraph/customLayout.ts","portal/AdvancedGraph/AdvancedGraph.tsx","portal/AppContainer/AppContainer.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["DrawerAction","DrawerActionsItems","action","GettingStarted","text","icon","InfoIcon","Default","AccountTreeIcon","Basic","Advanced","useStyles","makeStyles","theme","root","display","appBar","zIndex","drawer","backgroundColor","color","width","flexShrink","drawerPaper","drawerContainer","overflow","ClippedDrawerAppBar","props","classes","useState","selectedDrawerAction","setSelectedDrawerAction","listItems","map","item","IconName","ListItem","divider","button","selected","key","onClick","handleDrawerClick","ListItemIcon","ListItemText","primary","AppBar","position","className","Toolbar","Typography","variant","Drawer","paper","List","PanningAxis","id","newId","Math","random","pow","toString","slice","Orientation","Alignment","CustomDagreLayout","defaultSettings","orientation","LEFT_TO_RIGHT","marginX","marginY","edgePadding","rankPadding","nodePadding","multigraph","compound","settings","dagreGraph","dagreNodes","dagreEdges","graph","this","createDagreGraph","dagre","edgeLabels","_edgeLabels","dagreNodeId","dagreNode","_nodes","node","nodes","find","n","x","y","height","edge","sourceNode","source","targetNode","target","rankAxis","orderAxis","rankDimension","dir","startingPoint","endingPoint","points","Object","assign","Graph","setGraph","rankdir","marginx","marginy","edgesep","ranksep","nodesep","align","acyclicer","ranker","setDefaultEdgeLabel","edges","l","newLink","setNode","setEdge","SunGraph","state","initialized","graphHeight","graphWidth","graphContainerStyle","style","view","setState","graphElement","document","getElementById","parentElement","parentHeight","clientHeight","parentWidth","clientWidth","React","Component","SunGraphBase","subscriptions","dims","isPanning","isDragging","draggingNode","graphDims","transformationMatrix","identity","initialTransform","isMouseMoveCalled","graphStyle","update$","push","subscribe","update","center$","center","zoomToFit$","zoomToFit","panToNode$","nodeId","panToNodeId","draw","transform","unsubscribe","nodeTemplate","rx","ry","fill","isNodeTemplateHTML","template","defaultNodeTemplate","xmlns","onMouseDown","e","onNodeMouseDown","links","link","strokeWidth","markerEnd","d","line","graphClick","onMouseMove","onMouseUp","onWheel","preventDefault","stopPropagation","delta","max","min","wheelDelta","detail","deltaY","deltaX","onZoom","defsTemplate","createGraph","updateTransform","floor","margins","showXAxis","showYAxis","xAxisHeight","yAxisWidth","showXLabel","showYLabel","showLegend","legendType","legendPosition","columns","xOffset","chartWidth","chartHeight","calculateViewDimensions","nodeWidth","nodeHeight","data","layout","run","handleDraw","newLinks","edgeLabelId","edgeLabel","generateLine","updateMidpointOnEdge","textPos","length","textTransform","textAngle","calcDominantBaseline","autoZoom","autoCenter","firstPoint","dominantBaseline","textPath","reverse","shape","curve","lineFunction","$event","direction","enableTrackpadSupport","ctrlKey","zoomFactor","zoomSpeed","newZoomLevel","zoomLevel","minZoomLevel","maxZoomLevel","enableZoom","panOnZoom","mouseX","clientX","mouseY","clientY","svg","querySelector","pt","createSVGPoint","svgGlobal","matrixTransform","getScreenCTM","inverse","pan","zoom","ignoreZoomLevel","newTempTransofrmationMetrix","translate","f","undefined","isNaN","panX","panOffsetX","panY","panOffsetY","factor","scale","zoomChange","level","a","Number","event","movementX","movementY","draggingEnabled","onDrag","updateEdge","redrawEdge","forceUpdate","toSVG","smoothMatrix","panningEnabled","handlePanning","panningAxis","clickHandler","onDragEnd","onDragStart","panTo","heightZoom","widthZoom","Horizontal","Vertical","onPan","midPoint","first","second","zoomTo","defaultProps","value","viewBox","refX","refY","markerWidth","markerHeight","orient","BasicGraphComponent","label","basicNodeUI","DefaultGraph","table","marginBottom","createData","name","isRequired","description","rows","paragraph","fontSize","fontWeight","TableContainer","component","Paper","Table","stickyHeader","TableHead","TableRow","TableCell","TableBody","row","scope","CustomLayout","AdvancedGraphComponent","beta","singleNodeUIOption1","singleNodeUIOption2","defaultNodeUI","alert","AppContainerComponent","drawerAction","mainClassName","loadDrawerAction","Link","href","App","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.46fbd69c.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport {\n  AppBar,\n  Toolbar,\n  Typography,\n  Drawer,\n  List,\n  ListItemIcon,\n  ListItem,\n  ListItemText,\n  makeStyles,\n} from \"@material-ui/core\";\nimport InfoIcon from \"@material-ui/icons/Info\";\nimport AccountTreeIcon from \"@material-ui/icons/AccountTree\";\n\nconst drawerWidth = 240;\n\nexport enum DrawerAction {\n  GettingStarted = \"GettingStarted\",\n  Default = \"Deafult\",\n  Basic = \"Basic\",\n  Advanced = \"Advanced\",\n}\n\nconst DrawerActionsItems = [\n  {\n    action: DrawerAction.GettingStarted,\n    text: \"Getting Started\",\n    icon: InfoIcon,\n  },\n  {\n    action: DrawerAction.Default,\n    text: \"Default Graph\",\n    icon: AccountTreeIcon,\n  },\n  {\n    action: DrawerAction.Basic,\n    text: \"Basic Graph\",\n    icon: AccountTreeIcon,\n  },\n  {\n    action: DrawerAction.Advanced,\n    text: \"Advanced Graph\",\n    icon: AccountTreeIcon,\n  },\n];\n\nexport const useStyles = makeStyles((theme) => ({\n  root: {\n    display: \"flex\",\n  },\n  appBar: {\n    zIndex: theme.zIndex.drawer + 1,\n    backgroundColor: \"#354356\",\n    color: \"#C3DBE3\",\n  },\n  drawer: {\n    width: drawerWidth,\n    flexShrink: 0,\n  },\n  drawerPaper: {\n    width: drawerWidth,\n  },\n  drawerContainer: {\n    overflow: \"auto\",\n  },\n}));\n\nexport function ClippedDrawerAppBar(props: any) {\n  const classes = useStyles();\n  const [selectedDrawerAction, setSelectedDrawerAction] = useState(\n    DrawerAction.GettingStarted\n  );\n\n  const listItems = DrawerActionsItems.map((item) => {\n    const IconName = item.icon;\n    return (\n      <ListItem\n        divider\n        button\n        selected={selectedDrawerAction === item.action}\n        key={item.action}\n        onClick={() => {\n          setSelectedDrawerAction(item.action);\n          props.handleDrawerClick(item.action);\n        }}\n      >\n        <ListItemIcon>\n          <IconName />\n        </ListItemIcon>\n        <ListItemText primary={item.text} />\n      </ListItem>\n    );\n  });\n\n  return (\n    <>\n      <AppBar position=\"fixed\" className={classes.appBar}>\n        <Toolbar>\n          <Typography variant=\"h6\">Sun Graph</Typography>\n        </Toolbar>\n      </AppBar>\n      <Drawer\n        className={classes.drawer}\n        variant=\"permanent\"\n        classes={{\n          paper: classes.drawerPaper,\n        }}\n      >\n        <Toolbar />\n        <div className={classes.drawerContainer}>\n          <List>{listItems}</List>\n        </div>\n      </Drawer>\n    </>\n  );\n}\n","export enum PanningAxis {\n  Both = \"both\",\n  Horizontal = \"horizontal\",\n  Vertical = \"vertical\",\n}\n\nexport interface Graph {\n  edges: Edge[];\n  nodes: Node[];\n  edgeLabels?: any;\n}\n\nexport interface NodePosition {\n  x: number;\n  y: number;\n}\n\nexport interface Node {\n  id: string;\n  template?: (node: Node) => React.ReactNode;\n  width?: number;\n  height?: number;\n  label?: string;\n  transform?: string;\n  data?: any;\n  position?: NodePosition;\n}\n\nexport interface Edge {\n  id?: string;\n  source: string;\n  target: string;\n  label?: string;\n  data?: any;\n  points?: any;\n  line?: string;\n  midPoint?: NodePosition;\n}\n","export function id(): string {\n  let newId: string = (\n    \"0000\" + ((Math.random() * Math.pow(36, 4)) << 0).toString(36)\n  ).slice(-4);\n\n  newId = `a${newId}`;\n\n  return newId;\n}\n","import { Layout } from \"SunGraph/models/layout.model\";\nimport { Graph, Node } from \"SunGraph/models/graph.model\";\nimport { id } from \"SunGraph/utils/id\";\nimport * as dagre from \"dagre\";\nimport { Edge } from \"SunGraph/models/graph.model\";\n\nexport enum Orientation {\n  LEFT_TO_RIGHT = \"LR\",\n  RIGHT_TO_LEFT = \"RL\",\n  TOP_TO_BOTTOM = \"TB\",\n  BOTTOM_TO_TOM = \"BT\",\n}\nexport enum Alignment {\n  CENTER = \"C\",\n  UP_LEFT = \"UL\",\n  UP_RIGHT = \"UR\",\n  DOWN_LEFT = \"DL\",\n  DOWN_RIGHT = \"DR\",\n}\n\nexport interface DagreSettings {\n  orientation?: Orientation;\n  marginX?: number;\n  marginY?: number;\n  edgePadding?: number;\n  rankPadding?: number;\n  nodePadding?: number;\n  align?: Alignment;\n  acyclicer?: \"greedy\" | undefined;\n  ranker?: \"network-simplex\" | \"tight-tree\" | \"longest-path\";\n  multigraph?: boolean;\n  compound?: boolean;\n}\n\nexport class CustomDagreLayout implements Layout {\n  defaultSettings: DagreSettings = {\n    orientation: Orientation.LEFT_TO_RIGHT,\n    marginX: 20,\n    marginY: 20,\n    edgePadding: 100,\n    rankPadding: 100,\n    nodePadding: 50,\n    multigraph: true,\n    compound: true,\n  };\n  settings: DagreSettings = {};\n\n  dagreGraph: any;\n  dagreNodes: any;\n  dagreEdges: any;\n\n  run(graph: Graph): Graph {\n    this.createDagreGraph(graph);\n    dagre.layout(this.dagreGraph);\n\n    graph.edgeLabels = this.dagreGraph._edgeLabels;\n\n    for (const dagreNodeId in this.dagreGraph._nodes) {\n      const dagreNode = this.dagreGraph._nodes[dagreNodeId];\n      const node = graph.nodes.find((n) => n.id === dagreNode.id);\n      node.position = {\n        x: dagreNode.x,\n        y: dagreNode.y,\n      };\n      node.width = dagreNode.width;\n      node.height = dagreNode.height;\n    }\n\n    return graph;\n  }\n\n  public updateEdge(graph: Graph, edge: Edge): Graph {\n    const sourceNode = graph.nodes.find((n) => n.id === edge.source);\n    const targetNode: Node = graph.nodes.find((n) => n.id === edge.target);\n    const rankAxis: \"x\" | \"y\" =\n      this.settings.orientation === \"BT\" || this.settings.orientation === \"TB\"\n        ? \"y\"\n        : \"x\";\n    const orderAxis: \"x\" | \"y\" = rankAxis === \"y\" ? \"x\" : \"y\";\n    const rankDimension = rankAxis === \"y\" ? \"height\" : \"width\";\n    // determine new arrow position\n    const dir =\n      sourceNode.position[rankAxis] <= targetNode.position[rankAxis] ? -1 : 1;\n    const startingPoint = {\n      [orderAxis]: sourceNode.position[orderAxis],\n      [rankAxis]:\n        sourceNode.position[rankAxis] -\n        dir *\n          ((rankDimension === \"height\" ? sourceNode.height : sourceNode.width) /\n            2),\n    };\n    const endingPoint = {\n      [orderAxis]: targetNode.position[orderAxis],\n      [rankAxis]:\n        targetNode.position[rankAxis] +\n        dir *\n          ((rankDimension === \"height\" ? targetNode.height : targetNode.width) /\n            2),\n    };\n    // generate new points\n    edge.points = [\n      startingPoint,\n      {\n        [orderAxis]: endingPoint[orderAxis],\n        [rankAxis]: (startingPoint[rankAxis] + endingPoint[rankAxis]) / 2,\n      },\n      endingPoint,\n    ];\n    return graph;\n  }\n\n  createDagreGraph(graph: Graph): any {\n    const settings = Object.assign({}, this.defaultSettings, this.settings);\n    this.dagreGraph = new dagre.graphlib.Graph({\n      compound: settings.compound,\n      multigraph: settings.multigraph,\n    });\n\n    this.dagreGraph.setGraph({\n      rankdir: settings.orientation,\n      marginx: settings.marginX,\n      marginy: settings.marginY,\n      edgesep: settings.edgePadding,\n      ranksep: settings.rankPadding,\n      nodesep: settings.nodePadding,\n      align: settings.align,\n      acyclicer: settings.acyclicer,\n      ranker: settings.ranker,\n      multigraph: settings.multigraph,\n      compound: settings.compound,\n    });\n\n    // Default to assigning a new object as a label for each new edge.\n    this.dagreGraph.setDefaultEdgeLabel(() => {\n      return {\n        /* empty */\n      };\n    });\n\n    this.dagreNodes = graph.nodes.map((n) => {\n      const node: any = Object.assign({}, n);\n      node.width = n.width;\n      node.height = n.height;\n      node.x = n.position.x;\n      node.y = n.position.y;\n      return node;\n    });\n\n    this.dagreEdges = graph.edges.map((l) => {\n      const newLink: any = Object.assign({}, l);\n      if (!newLink.id) {\n        newLink.id = id();\n      }\n      return newLink;\n    });\n\n    for (const node of this.dagreNodes) {\n      if (!node.width) {\n        node.width = 20;\n      }\n      if (!node.height) {\n        node.height = 30;\n      }\n\n      // update dagre\n      this.dagreGraph.setNode(node.id, node);\n    }\n\n    // update dagre\n    for (const edge of this.dagreEdges) {\n      if (settings.multigraph) {\n        this.dagreGraph.setEdge(edge.source, edge.target, edge, edge.id);\n      } else {\n        this.dagreGraph.setEdge(edge.source, edge.target);\n      }\n    }\n\n    return this.dagreGraph;\n  }\n}\n","import React from \"react\";\n\nimport * as shape from \"d3-shape\";\nimport { Observable, Subscription } from \"rxjs\";\nimport {\n  identity,\n  scale,\n  smoothMatrix,\n  toSVG,\n  transform,\n  translate,\n  Matrix,\n} from \"transformation-matrix\";\nimport { Layout } from \"SunGraph/models/layout.model\";\nimport { Graph, Node, Edge, PanningAxis } from \"SunGraph/models/graph.model\";\nimport { id } from \"SunGraph/utils/id\";\n\nimport {\n  ViewDimensions,\n  calculateViewDimensions,\n} from \"./utils/viewDimensionsHelper\";\n\nimport \"./SunGraph.scss\";\nimport { CustomDagreLayout } from \"./layouts/customDagreLayout\";\n\nconst DefaultGraphSize: number = 1000;\nconst DefaultNodeSize: number = 60;\n\ninterface State {\n  initialized: boolean;\n  transform?: string;\n}\n\ninterface Props {\n  view?: [number, number];\n  nodes: Node[];\n  links: Edge[];\n  layout?: Layout;\n  defaultNodeTemplate?: (node: Node) => React.ReactNode;\n  isNodeTemplateHTML?: boolean;\n  curve?: any;\n  nodeHeight?: number;\n  nodeWidth?: number;\n  draggingEnabled?: boolean;\n  panningEnabled?: boolean;\n  enableZoom?: boolean;\n  zoomSpeed?: number;\n  minZoomLevel?: number;\n  maxZoomLevel?: number;\n  autoCenter?: boolean;\n  update$?: Observable<any>;\n  center$?: Observable<any>;\n  zoomToFit$?: Observable<any>;\n  panToNode$?: Observable<any>;\n  enableTrackpadSupport?: boolean;\n  autoZoom?: boolean;\n  zoomChange?: (value: number) => void;\n  clickHandler?: (value: MouseEvent) => void;\n  defsTemplate?: () => any;\n\n  //Not reviewed props\n  panOnZoom?: boolean;\n  panningAxis?: PanningAxis;\n}\n\ninterface BasicState {\n  initialized: boolean;\n  graphWidth: number;\n  graphHeight: number;\n}\n\nexport class SunGraph extends React.Component<Props, BasicState> {\n  constructor(props: Props) {\n    super(props);\n    this.state = { initialized: false, graphHeight: 0, graphWidth: 0 };\n  }\n\n  public render(): React.ReactNode {\n    const graphContainerStyle = {\n      width: this.state ? this.state.graphWidth : DefaultGraphSize,\n      height: this.state ? this.state.graphHeight : DefaultGraphSize,\n    };\n\n    return (\n      <div id=\"graphContainer\" style={graphContainerStyle}>\n        {this.state.initialized && (\n          <SunGraphBase\n            {...this.props}\n            view={[this.state.graphWidth, this.state.graphHeight]}\n          ></SunGraphBase>\n        )}\n      </div>\n    );\n  }\n\n  public componentDidMount(): void {\n    if (this.props.view) {\n      this.setState({\n        initialized: true,\n        graphWidth: this.props.view[0],\n        graphHeight: this.props.view[1],\n      });\n    } else {\n      const graphElement = document.getElementById(\"graphContainer\");\n      if (!graphElement) {\n        this.setState({\n          initialized: true,\n          graphWidth: 0,\n          graphHeight: 0,\n        });\n        return;\n      }\n\n      const parentGraphElement = graphElement.parentElement;\n      if (!parentGraphElement) {\n        this.setState({\n          initialized: true,\n          graphWidth: 0,\n          graphHeight: 0,\n        });\n        return;\n      }\n\n      const parentHeight: number = graphElement.parentElement.clientHeight;\n      const parentWidth: number = graphElement.parentElement.clientWidth;\n      this.setState({\n        initialized: true,\n        graphWidth: parentWidth,\n        graphHeight: parentHeight,\n      });\n    }\n  }\n}\n\nclass SunGraphBase extends React.Component<Props, State> {\n  private width: number;\n  private height: number;\n  private subscriptions: Subscription[] = [];\n  private dims: ViewDimensions;\n  private isPanning = false;\n  private isDragging = false;\n  private draggingNode: Node;\n  private graph: Graph;\n  private graphDims: any = { width: 0, height: 0 };\n  private transformationMatrix: Matrix = identity();\n  private initialTransform: string;\n  private isMouseMoveCalled: boolean = false;\n\n  private graphStyle = {\n    width: this.props.view[0],\n    height: this.props.view[1],\n  };\n\n  static defaultProps = {\n    view: [DefaultGraphSize, DefaultGraphSize],\n    curve: shape.curveLinear,\n    isNodeTemplateHTML: true,\n    layout: new CustomDagreLayout(),\n    clickHandler: (value: MouseEvent) => {},\n    zoomChange: (value: number) => {},\n    zoomSpeed: 0.1,\n    defsTemplate: () => (\n      <svg>\n        <marker\n          id=\"arrow\"\n          viewBox=\"0 -5 10 10\"\n          refX=\"8\"\n          refY=\"0\"\n          markerWidth=\"4\"\n          markerHeight=\"4\"\n          orient=\"auto\"\n        >\n          <path d=\"M0,-5L10,0L0,5\" className=\"arrow-head\" />\n        </marker>\n      </svg>\n    ),\n  };\n\n  constructor(props: Props) {\n    super(props);\n    if (this.props.update$) {\n      this.subscriptions.push(\n        this.props.update$.subscribe(() => {\n          this.update();\n        })\n      );\n    }\n\n    if (this.props.center$) {\n      this.subscriptions.push(\n        this.props.center$.subscribe(() => {\n          this.center();\n        })\n      );\n    }\n    if (this.props.zoomToFit$) {\n      this.subscriptions.push(\n        this.props.zoomToFit$.subscribe(() => {\n          this.zoomToFit();\n        })\n      );\n    }\n\n    if (this.props.panToNode$) {\n      this.subscriptions.push(\n        this.props.panToNode$.subscribe((nodeId: string) => {\n          this.panToNodeId(nodeId);\n        })\n      );\n    }\n\n    this.state = { initialized: false };\n    this.update();\n    this.draw();\n    this.state = { initialized: false, transform: this.initialTransform };\n  }\n\n  public componentDidMount(): void {\n    this.setState({ initialized: true });\n  }\n\n  public componentWillUnmount(): void {\n    for (const sub of this.subscriptions) {\n      sub.unsubscribe();\n    }\n    this.subscriptions = [];\n  }\n\n  public render(): React.ReactNode {\n    const nodes = [];\n    for (let node of this.graph.nodes) {\n      let nodeTemplate: any = (\n        <rect\n          rx=\"40\"\n          ry=\"40\"\n          width={node.width}\n          height={node.height}\n          fill=\"#C3DBE3\"\n        />\n      );\n\n      if (\n        this.props.isNodeTemplateHTML &&\n        (node.template || this.props.defaultNodeTemplate)\n      ) {\n        nodeTemplate = (\n          <svg>\n            <g\n              className=\"node\"\n              xmlns=\"http://www.w3.org/2000/xhtml\"\n              width={node.width}\n              height={node.height}\n              onMouseDown={(e: any) => {\n                this.onNodeMouseDown(e, node);\n              }}\n            >\n              <foreignObject\n                width={node.width}\n                height={node.height}\n                xmlns=\"http://www.w3.org/2000/xhtml\"\n              >\n                {node.template\n                  ? node.template(node)\n                  : this.props.defaultNodeTemplate(node)}\n              </foreignObject>\n            </g>\n          </svg>\n        );\n      }\n\n      if (\n        !this.props.isNodeTemplateHTML &&\n        (node.template || this.props.defaultNodeTemplate)\n      ) {\n        nodeTemplate = this.props.defaultNodeTemplate\n          ? this.props.defaultNodeTemplate(node)\n          : node.template(node);\n      }\n\n      nodes.push(\n        <g\n          className=\"node\"\n          key={node.id}\n          width={node.width}\n          height={node.height}\n          onMouseDown={(e: any) => {\n            this.onNodeMouseDown(e, node);\n          }}\n        >\n          <g transform={node.transform}>{nodeTemplate}</g>\n        </g>\n      );\n    }\n\n    const links = [];\n    for (let link of this.graph.edges) {\n      links.push(\n        <g className=\"link-group\" id={link.id} key={link.id}>\n          <g>\n            <g className=\"edge\">\n              <path\n                className=\"line\"\n                strokeWidth=\"2\"\n                markerEnd=\"url(#arrow)\"\n                d={link.line}\n              ></path>\n            </g>\n          </g>\n        </g>\n      );\n    }\n\n    return (\n      this.state.initialized && (\n        <div\n          style={this.graphStyle}\n          className=\"graph\"\n          onClick={(e: any) => this.graphClick(e)}\n          onMouseMove={(e: any) => this.onMouseMove(e)}\n          onMouseDown={(e: any) => {\n            this.onMouseDown(e);\n          }}\n          onMouseUp={(e: any) => {\n            this.onMouseUp(e);\n          }}\n          onWheel={(e: any) => {\n            e.preventDefault();\n            e.stopPropagation();\n            const delta: number = Math.max(\n              -1,\n              Math.min(1, e.wheelDelta || -e.detail || e.deltaY || e.deltaX)\n            );\n            const isWheelMouseUp: boolean = e.wheelDelta\n              ? delta > 0\n              : delta < 0;\n            if (isWheelMouseUp) {\n              this.onZoom(e, \"in\");\n            } else {\n              this.onZoom(e, \"out\");\n            }\n          }}\n        >\n          <svg className=\"svgGraph\">\n            <g transform={this.state.transform}>\n              <g className=\"defsTemplate\">{this.props.defsTemplate()}</g>\n              <g className=\"nodes\">{nodes}</g>\n              <g className=\"links\">{links}</g>\n            </g>\n          </svg>\n        </div>\n      )\n    );\n  }\n\n  private get zoomLevel() {\n    return this.transformationMatrix.a;\n  }\n\n  private set zoomLevel(level) {\n    this.zoomTo(Number(level));\n  }\n\n  private get panOffsetX() {\n    return this.transformationMatrix.e;\n  }\n\n  private get panOffsetY() {\n    return this.transformationMatrix.f;\n  }\n\n  private update(): void {\n    this.createGraph();\n    this.updateTransform();\n  }\n\n  private createGraph(): void {\n    if (this.props.view) {\n      this.width = this.props.view[0];\n      this.height = this.props.view[1];\n    } else {\n      this.width = DefaultGraphSize;\n      this.height = DefaultGraphSize;\n    }\n\n    this.width = Math.floor(this.width);\n    this.height = Math.floor(this.height);\n    this.dims = calculateViewDimensions({\n      width: this.width,\n      height: this.height,\n      margins: [0, 0, 0, 0],\n      showLegend: false,\n    });\n\n    const initializeNode = (n: Node) => {\n      if (!n.id) {\n        n.id = id();\n      }\n\n      if (!n.width || !n.height) {\n        n.width = this.props.nodeWidth ? this.props.nodeWidth : DefaultNodeSize;\n        n.height = this.props.nodeHeight\n          ? this.props.nodeHeight\n          : DefaultNodeSize;\n      }\n\n      n.position = {\n        x: 0,\n        y: 0,\n      };\n      n.data = n.data ? n.data : {};\n      return n;\n    };\n\n    this.graph = {\n      nodes: [...(this.props.nodes || [])].map(initializeNode),\n      edges: [...(this.props.links || [])].map((e) => {\n        if (!e.id) {\n          e.id = id();\n        }\n        return e;\n      }),\n    };\n  }\n\n  private draw(): void {\n    if (!this.props.layout || typeof this.props.layout === \"string\") {\n      return;\n    }\n\n    this.graph = this.props.layout.run(this.graph);\n    this.handleDraw();\n  }\n\n  private handleDraw() {\n    this.graph.nodes.map((n) => {\n      n.transform = `translate(${n.position.x - n.width / 2 || 0}, ${\n        n.position.y - n.height / 2 || 0\n      })`;\n      if (!n.data) {\n        n.data = {};\n      }\n      return n;\n    });\n\n    const newLinks = [];\n    for (const edgeLabelId in this.graph.edgeLabels) {\n      const edgeLabel = this.graph.edgeLabels[edgeLabelId];\n\n      const points = edgeLabel.points;\n      const line = this.generateLine(points);\n\n      const newLink = Object.assign({}, edgeLabel);\n      newLink.line = line;\n      newLink.points = points;\n\n      this.updateMidpointOnEdge(newLink, points);\n\n      const textPos = points[Math.floor(points.length / 2)];\n      if (textPos) {\n        newLink.textTransform = `translate(${textPos.x || 0},${\n          textPos.y || 0\n        })`;\n      }\n\n      newLink.textAngle = 0;\n      this.calcDominantBaseline(newLink);\n      newLinks.push(newLink);\n    }\n\n    this.graph.edges = newLinks;\n    if (this.graph.nodes && this.graph.nodes.length) {\n      this.graphDims.width = Math.max(\n        ...this.graph.nodes.map((n) => n.position.x + n.width)\n      );\n      this.graphDims.height = Math.max(\n        ...this.graph.nodes.map((n) => n.position.y + n.height)\n      );\n    }\n\n    if (this.props.autoZoom) {\n      this.zoomToFit();\n    }\n\n    if (this.props.autoCenter) {\n      this.center();\n    }\n  }\n\n  private calcDominantBaseline(link: any): void {\n    const firstPoint = link.points[0];\n    const lastPoint = link.points[link.points.length - 1];\n\n    if (lastPoint.x < firstPoint.x) {\n      link.dominantBaseline = \"text-before-edge\";\n\n      link.textPath = this.generateLine([...link.points].reverse());\n    } else {\n      link.dominantBaseline = \"text-after-edge\";\n      link.textPath = link.line;\n    }\n  }\n\n  private generateLine(points: any): any {\n    const lineFunction = shape\n      .line<any>()\n      .x((d) => d.x)\n      .y((d) => d.y)\n      .curve(this.props.curve);\n    return lineFunction(points);\n  }\n\n  private onZoom($event: WheelEvent, direction: any): void {\n    if (this.props.enableTrackpadSupport && !$event.ctrlKey) {\n      this.pan($event.deltaX * -1, $event.deltaY * -1);\n      return;\n    }\n\n    const zoomFactor =\n      1 + (direction === \"in\" ? this.props.zoomSpeed : -this.props.zoomSpeed);\n\n    const newZoomLevel = this.zoomLevel * zoomFactor;\n    if (\n      newZoomLevel <= this.props.minZoomLevel ||\n      newZoomLevel >= this.props.maxZoomLevel\n    ) {\n      return;\n    }\n\n    if (!this.props.enableZoom) {\n      return;\n    }\n\n    if (this.props.panOnZoom === true && $event) {\n      const mouseX = $event.clientX;\n      const mouseY = $event.clientY;\n\n      const svg = document.querySelector(\"svg\");\n      const pt = svg.createSVGPoint();\n\n      pt.x = mouseX;\n      pt.y = mouseY;\n      const svgGlobal = pt.matrixTransform(svg.getScreenCTM().inverse());\n\n      this.pan(svgGlobal.x, svgGlobal.y, true);\n      this.zoom(zoomFactor);\n      this.pan(svgGlobal.x * -1, svgGlobal.y * -1, true);\n    } else {\n      this.zoom(zoomFactor);\n    }\n  }\n\n  private pan(x: number, y: number, ignoreZoomLevel: boolean = false): void {\n    const zoomLevel = ignoreZoomLevel ? 1 : this.zoomLevel;\n\n    const newTempTransofrmationMetrix = transform(\n      this.transformationMatrix,\n      translate(x / zoomLevel, y / zoomLevel)\n    );\n\n    if (\n      newTempTransofrmationMetrix.f < 0 ||\n      newTempTransofrmationMetrix.e < 0\n    ) {\n      return;\n    }\n    if (\n      newTempTransofrmationMetrix.e >\n        this.dims.width - this.graphDims.width * this.zoomLevel ||\n      newTempTransofrmationMetrix.f >\n        this.dims.height - this.graphDims.height * this.zoomLevel\n    ) {\n      return;\n    }\n\n    this.transformationMatrix = transform(\n      this.transformationMatrix,\n      translate(x / zoomLevel, y / zoomLevel)\n    );\n\n    this.updateTransform();\n  }\n\n  private panTo(x: number | null, y: number | null): void {\n    if (\n      x === null ||\n      x === undefined ||\n      isNaN(x) ||\n      y === null ||\n      y === undefined ||\n      isNaN(y)\n    ) {\n      return;\n    }\n\n    const panX = -this.panOffsetX - x * this.zoomLevel + this.dims.width / 2;\n    const panY = -this.panOffsetY - y * this.zoomLevel + this.dims.height / 2;\n\n    this.transformationMatrix = transform(\n      this.transformationMatrix,\n      translate(panX / this.zoomLevel, panY / this.zoomLevel)\n    );\n\n    this.updateTransform();\n  }\n\n  private zoom(factor: number): void {\n    this.transformationMatrix = transform(\n      this.transformationMatrix,\n      scale(factor, factor)\n    );\n    this.props.zoomChange(this.zoomLevel);\n    this.updateTransform();\n  }\n\n  private zoomTo(level: number): void {\n    this.transformationMatrix.a = isNaN(level)\n      ? this.transformationMatrix.a\n      : Number(level);\n    this.transformationMatrix.d = isNaN(level)\n      ? this.transformationMatrix.d\n      : Number(level);\n    this.props.zoomChange(this.zoomLevel);\n    this.updateTransform();\n    this.update();\n  }\n\n  private onPan(event: MouseEvent): void {\n    this.pan(event.movementX, event.movementY);\n  }\n\n  private onDrag(event: MouseEvent): void {\n    if (!this.props.draggingEnabled) {\n      return;\n    }\n    const node = this.draggingNode;\n    if (\n      this.props.layout &&\n      typeof this.props.layout !== \"string\" &&\n      this.props.layout.onDrag\n    ) {\n      this.props.layout.onDrag(node, event);\n    }\n\n    node.position.x += event.movementX / this.zoomLevel;\n    node.position.y += event.movementY / this.zoomLevel;\n\n    const x = node.position.x - node.width / 2;\n    const y = node.position.y - node.height / 2;\n    node.transform = `translate(${x}, ${y})`;\n\n    for (const link of this.graph.edges) {\n      if (\n        link.target === node.id ||\n        link.source === node.id ||\n        (link.target as any).id === node.id ||\n        (link.source as any).id === node.id\n      ) {\n        if (this.props.layout && typeof this.props.layout !== \"string\") {\n          this.graph = this.props.layout.updateEdge(this.graph, link);\n          this.redrawEdge(link);\n        }\n      }\n    }\n\n    this.forceUpdate();\n  }\n\n  private redrawEdge(edge: Edge) {\n    const line = this.generateLine(edge.points);\n    this.calcDominantBaseline(edge);\n    edge.line = line;\n  }\n\n  private updateTransform(): void {\n    const transform = toSVG(smoothMatrix(this.transformationMatrix, 100));\n    if (!this.state.initialized) {\n      this.initialTransform = transform;\n      return;\n    }\n\n    this.setState({\n      transform: transform,\n    });\n  }\n\n  private onMouseMove($event: MouseEvent): void {\n    this.isMouseMoveCalled = true;\n    if (this.isPanning && this.props.panningEnabled) {\n      this.handlePanning(this.props.panningAxis, $event);\n    } else if (this.isDragging && this.props.draggingEnabled) {\n      this.onDrag($event);\n    }\n  }\n\n  private onMouseDown(event: MouseEvent): void {\n    this.isMouseMoveCalled = false;\n    this.isPanning = true;\n    this.isMouseMoveCalled = false;\n  }\n\n  private graphClick(event: MouseEvent): void {\n    if (!this.isMouseMoveCalled) this.props.clickHandler(event);\n  }\n\n  private onMouseUp(event: MouseEvent): void {\n    this.isDragging = false;\n    this.isPanning = false;\n    if (\n      this.props.layout &&\n      typeof this.props.layout !== \"string\" &&\n      (this.props.layout as Layout).onDragEnd\n    ) {\n      (this.props.layout as Layout).onDragEnd(this.draggingNode, event);\n    }\n  }\n\n  private onNodeMouseDown(event: MouseEvent, node: any): void {\n    if (!this.props.draggingEnabled) {\n      return;\n    }\n\n    event.stopPropagation();\n    this.isDragging = true;\n    this.draggingNode = node;\n\n    if (\n      this.props.layout &&\n      typeof this.props.layout !== \"string\" &&\n      this.props.layout.onDragStart\n    ) {\n      this.props.layout.onDragStart(node, event);\n    }\n  }\n\n  private center(): void {\n    this.panTo(this.graphDims.width / 2, this.graphDims.height / 2);\n  }\n\n  private zoomToFit(): void {\n    const heightZoom = this.dims.height / this.graphDims.height;\n    const widthZoom = this.dims.width / this.graphDims.width;\n    const zoomLevel = Math.min(heightZoom, widthZoom, 1);\n\n    if (\n      zoomLevel <= this.props.minZoomLevel ||\n      zoomLevel >= this.props.maxZoomLevel\n    ) {\n      return;\n    }\n\n    if (zoomLevel !== this.zoomLevel) {\n      this.zoomLevel = zoomLevel;\n      this.updateTransform();\n      this.props.zoomChange(this.zoomLevel);\n    }\n  }\n\n  private panToNodeId(nodeId: string): void {\n    const node = this.graph.nodes.find((n) => n.id === nodeId);\n    if (!node) {\n      return;\n    }\n\n    this.panTo(node.position.x, node.position.y);\n  }\n\n  private handlePanning(key: string, event: MouseEvent) {\n    switch (key) {\n      case PanningAxis.Horizontal:\n        this.pan(event.movementX, 0);\n        break;\n      case PanningAxis.Vertical:\n        this.pan(0, event.movementY);\n        break;\n      default:\n        this.onPan(event);\n        break;\n    }\n  }\n\n  private updateMidpointOnEdge(edge: Edge, points: any): void {\n    if (!edge || !points) {\n      return;\n    }\n\n    if (points.length % 2 === 1) {\n      edge.midPoint = points[Math.floor(points.length / 2)];\n    } else {\n      const first = points[points.length / 2];\n      const second = points[points.length / 2 - 1];\n      edge.midPoint = {\n        x: (first.x + second.x) / 2,\n        y: (first.y + second.y) / 2,\n      };\n    }\n  }\n}\n","export interface ViewDimensions {\n  width: number;\n  height: number;\n  xOffset: number;\n}\n\nexport function calculateViewDimensions({\n  width = 500,\n  height = 500,\n  margins = [0, 0, 0, 0],\n  showXAxis = false,\n  showYAxis = false,\n  xAxisHeight = 0,\n  yAxisWidth = 0,\n  showXLabel = false,\n  showYLabel = false,\n  showLegend = false,\n  legendType = \"ordinal\",\n  legendPosition = \"right\",\n  columns = 12,\n}): ViewDimensions {\n  let xOffset = margins[3];\n  let chartWidth = width;\n  let chartHeight = height - margins[0] - margins[2];\n\n  if (showLegend && legendPosition === \"right\") {\n    if (legendType === \"ordinal\") {\n      columns -= 2;\n    } else {\n      columns -= 1;\n    }\n  }\n\n  chartWidth = (chartWidth * columns) / 12;\n\n  chartWidth = chartWidth - margins[1] - margins[3];\n\n  if (showXAxis) {\n    chartHeight -= 5;\n    chartHeight -= xAxisHeight;\n\n    if (showXLabel) {\n      // text height + spacing between axis label and tick labels\n      const offset = 25 + 5;\n      chartHeight -= offset;\n    }\n  }\n\n  if (showYAxis) {\n    chartWidth -= 5;\n    chartWidth -= yAxisWidth;\n    xOffset += yAxisWidth;\n    xOffset += 10;\n\n    if (showYLabel) {\n      // text height + spacing between axis label and tick labels\n      const offset = 25 + 5;\n      chartWidth -= offset;\n      xOffset += offset;\n    }\n  }\n\n  chartWidth = Math.max(0, chartWidth);\n  chartHeight = Math.max(0, chartHeight);\n\n  return {\n    width: Math.floor(chartWidth),\n    height: Math.floor(chartHeight),\n    xOffset: Math.floor(xOffset),\n  };\n}\n","import React from \"react\";\nimport { Node, Edge } from \"SunGraph/models/graph.model\";\nimport * as shape from \"d3-shape\";\nimport { SunGraph } from \"SunGraph/SunGraph\";\n\nimport \"./BasicGraph.scss\";\n\nexport class BasicGraphComponent extends React.Component {\n  public nodes: Node[] = [];\n  public links: Edge[] = [];\n  public curve: any = shape.curveLinear;\n\n  constructor(props: any) {\n    super(props);\n    this.nodes = [\n      {\n        id: \"1\",\n        label: \"Node 1\",\n        width: 100,\n        height: 100,\n      },\n      {\n        id: \"2\",\n        label: \"Node 2\",\n        data: {\n          sourceNode: \"1\",\n        },\n        width: 100,\n        height: 100,\n      },\n      {\n        id: \"3\",\n        label: \"Node 3\",\n        data: {\n          sourceNode: \"1\",\n        },\n        width: 100,\n        height: 100,\n      },\n      {\n        id: \"4\",\n        label: \"Node 4\",\n        data: {\n          sourceNode: \"1\",\n        },\n        width: 100,\n        height: 100,\n      },\n      {\n        id: \"5\",\n        label: \"Node 5\",\n        data: {\n          sourceNode: \"4\",\n        },\n        width: 100,\n        height: 100,\n      },\n    ];\n\n    for (const node of this.nodes) {\n      if (!node.data) {\n        continue;\n      }\n\n      const edge: Edge = {\n        source: node.data.sourceNode,\n        target: node.id,\n      };\n\n      this.links.push(edge);\n    }\n\n    this.state = {};\n  }\n\n  public basicNodeUI(node: Node) {\n    return (\n      <div className=\"container\">\n        <label className=\"title\">{node.label}</label>\n      </div>\n    );\n  }\n\n  render() {\n    return (\n      <SunGraph\n        nodes={this.nodes}\n        links={this.links}\n        panningEnabled={true}\n        enableZoom={true}\n        draggingEnabled={true}\n        autoCenter={true}\n        defaultNodeTemplate={(node) => this.basicNodeUI(node)}\n      ></SunGraph>\n    );\n  }\n}\n","import React from \"react\";\nimport { Node, Edge } from \"SunGraph/models/graph.model\";\nimport { SunGraph } from \"SunGraph/SunGraph\";\n\nexport class DefaultGraph extends React.Component {\n  public nodes: Node[] = [];\n  public links: Edge[] = [];\n\n  constructor(props: any) {\n    super(props);\n    this.nodes = [\n      {\n        id: \"1\",\n      },\n      {\n        id: \"2\",\n      },\n      {\n        id: \"3\",\n      },\n      {\n        id: \"4\",\n      },\n      {\n        id: \"5\",\n      },\n    ];\n\n    this.links = [\n      {\n        source: \"1\",\n        target: \"2\",\n      },\n      {\n        source: \"1\",\n        target: \"3\",\n      },\n      {\n        source: \"1\",\n        target: \"4\",\n      },\n      {\n        source: \"4\",\n        target: \"5\",\n      },\n    ];\n\n    this.state = {};\n  }\n\n  render() {\n    return <SunGraph nodes={this.nodes} links={this.links}></SunGraph>;\n  }\n}\n","import React from \"react\";\nimport { Typography } from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableContainer from \"@material-ui/core/TableContainer\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport Paper from \"@material-ui/core/Paper\";\n\nimport \"./GettingStarted.scss\";\n\nconst DefaultWidth: number = 1200;\n\nconst useStyles = makeStyles({\n  table: {\n    width: 1250,\n    marginBottom: 60,\n  },\n});\n\nfunction createData(name: any, isRequired: any, description: any) {\n  return { name, isRequired, description };\n}\n\nconst rows = [\n  createData(\n    \"nodes\",\n    \"Required\",\n    \"The graph node's data, each node has its properties as defined in the node class, custom data should be inside the data attribute.\"\n  ),\n  createData(\n    \"links\",\n    \"Required\",\n    \"The graph link data, each link must define its source node id and target node id. Source and target id nodes must be defined.\"\n  ),\n  createData(\n    \"view\",\n    \"Optional\",\n    \"An array of two values for the graph width and height, the default value is the size of the its parent container\"\n  ),\n  createData(\n    \"defaultNodeTemplate\",\n    \"Optional\",\n    \"Callback function which returns the node template UI, by default, the return node should return a proper HTML object. The node class can override this function for specific node template\"\n  ),\n  createData(\n    \"isNodeTemplateHTML\",\n    \"Optional\",\n    \"If set to true, the expected return node template is a proper HTML element, otherwise it will expect a proper SVG element. default value: true\"\n  ),\n  createData(\n    \"layout\",\n    \"Optional\",\n    \"Layout object will implement the Layout interface, the layout object will define the position of the nodes and links.\"\n  ),\n  createData(\n    \"curve\",\n    \"Optional\",\n    \"A line renders function for drawing the line between the selected point of the layout. sun graph works by default with d3-shape. For lines examples, please open http://bl.ocks.org/d3indepth/b6d4845973089bc1012dec1674d3aff8\"\n  ),\n  createData(\n    \"nodeHeight\",\n    \"Optional\",\n    \"Constant height for all the nodes, the Node class can override it for single node height\"\n  ),\n  createData(\n    \"nodeWidth\",\n    \"Optional\",\n    \"Constant width for all the nodes, the Node class can override it for single node width\"\n  ),\n  createData(\n    \"draggingEnabled\",\n    \"Optional\",\n    \"If set to true, the user will be able to drag each node. default value: false\"\n  ),\n  createData(\n    \"panningEnabled\",\n    \"Optional\",\n    \"If set to true, the user will be able to position the graph. default value: false\"\n  ),\n  createData(\n    \"enableZoom\",\n    \"Optional\",\n    \"If set to true, the user will be able to, zoom using the mouse wheel. default value: false\"\n  ),\n  createData(\n    \"minZoomLevel\",\n    \"Optional\",\n    \"Minimum zoom level, the value should be between the range of 0 and 4\"\n  ),\n  createData(\n    \"maxZoomLevel\",\n    \"Optional\",\n    \"Maximum zoom level, the value should be between the range of 0 and 4\"\n  ),\n  createData(\n    \"autoCenter\",\n    \"Optional\",\n    \"If set to true, the graph will be rendered in the center of the view. default value: false\"\n  ),\n  createData(\n    \"clickHandler\",\n    \"Optional\",\n    \"Callback function for listening to graph click event\"\n  ),\n];\n\nexport function GettingStarted() {\n  const classes = useStyles();\n\n  return (\n    <section className=\"gettingStartedContent\">\n      <Typography\n        paragraph\n        variant=\"h4\"\n        style={{ fontSize: 24, fontWeight: 600 }}\n      >\n        ➣ Introduction\n      </Typography>\n      <Typography paragraph style={{ width: DefaultWidth }}>\n        Inspired by swimlane/ngx-graph, 'sun graph' is a react component for\n        creating beautiful graph visualization.\n      </Typography>\n      <Typography paragraph style={{ width: DefaultWidth }}>\n        'sun graph' will help you to build beautiful graphs in a simple way and\n        to create your own custom graph shapes with your own data.\n      </Typography>\n      <Typography\n        paragraph\n        variant=\"h4\"\n        style={{ fontSize: 24, fontWeight: 600 }}\n      >\n        ➣ How to start building graphs?\n      </Typography>\n      <section className=\"buildingGraph\">\n        <Typography\n          variant=\"caption\"\n          paragraph\n          style={{ fontSize: 20, fontWeight: 600 }}\n        >\n          Import sun graph package to your project\n        </Typography>\n        <Typography paragraph style={{ width: DefaultWidth }}>\n          1. Install sun graph package by running the following command: 'yarn\n          add sun-graph' or 'npm install sun-graph'\n        </Typography>\n        <Typography paragraph style={{ width: DefaultWidth }}>\n          2. Import SunGraph component into your react component from sun-graph.\n        </Typography>\n        <Typography\n          variant=\"caption\"\n          paragraph\n          style={{ fontSize: 20, fontWeight: 600 }}\n        >\n          Import your data and Build your graph.\n        </Typography>\n        <Typography paragraph style={{ width: DefaultWidth }}>\n          Load sun graph component in your React component.\n        </Typography>\n        <Typography paragraph style={{ width: DefaultWidth }}>\n          The minimum input that sun graph require in order to load a graph is\n          the information on your nodes and links.\n        </Typography>\n        <Typography paragraph style={{ width: DefaultWidth }}>\n          Node - represented by the 'Node' class. We need to create an array of\n          nodes where each node must at least contain an id property. Once the\n          nodes array is ready, pass them to the nodes input props.\n        </Typography>\n        <Typography paragraph style={{ width: DefaultWidth }}>\n          Link - represented by the 'Link' class. We need to create an array of\n          links which will connect existing nodes. Each link object must have a\n          'source' property and 'destination' property with a node id. Once the\n          links array us ready, pass them to the links input props.\n        </Typography>\n      </section>\n      <Typography\n        paragraph\n        variant=\"h4\"\n        style={{ fontSize: 24, fontWeight: 600 }}\n      >\n        ➣ Sun Graph Component Inputs\n      </Typography>\n      <Typography paragraph style={{ width: DefaultWidth }}>\n        Sun Graph can be customized and has a set of capabilities which reacher\n        your graph experience.\n      </Typography>\n      <TableContainer component={Paper}>\n        <Table stickyHeader className={classes.table}>\n          <TableHead>\n            <TableRow>\n              <TableCell>Input</TableCell>\n              <TableCell align=\"left\">Required\\Optional</TableCell>\n              <TableCell align=\"left\">Description</TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {rows.map((row) => (\n              <TableRow key={row.name}>\n                <TableCell component=\"th\" scope=\"row\">\n                  {row.name}\n                </TableCell>\n                <TableCell align=\"left\">{row.isRequired}</TableCell>\n                <TableCell align=\"left\">{row.description}</TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n      </TableContainer>\n    </section>\n  );\n}\n","import { Layout } from \"SunGraph/models/layout.model\";\nimport { Graph, Node } from \"SunGraph/models/graph.model\";\nimport { id } from \"SunGraph/utils/id\";\nimport * as dagre from \"dagre\";\nimport { Edge } from \"SunGraph/models/graph.model\";\n\nexport enum Orientation {\n  LEFT_TO_RIGHT = \"LR\",\n  RIGHT_TO_LEFT = \"RL\",\n  TOP_TO_BOTTOM = \"TB\",\n  BOTTOM_TO_TOM = \"BT\",\n}\nexport enum Alignment {\n  CENTER = \"C\",\n  UP_LEFT = \"UL\",\n  UP_RIGHT = \"UR\",\n  DOWN_LEFT = \"DL\",\n  DOWN_RIGHT = \"DR\",\n}\n\nexport interface DagreSettings {\n  orientation?: Orientation;\n  marginX?: number;\n  marginY?: number;\n  edgePadding?: number;\n  rankPadding?: number;\n  nodePadding?: number;\n  align?: Alignment;\n  acyclicer?: \"greedy\" | undefined;\n  ranker?: \"network-simplex\" | \"tight-tree\" | \"longest-path\";\n  multigraph?: boolean;\n  compound?: boolean;\n}\n\nexport class CustomLayout implements Layout {\n  defaultSettings: DagreSettings = {\n    orientation: Orientation.LEFT_TO_RIGHT,\n    marginX: 20,\n    marginY: 20,\n    edgePadding: 100,\n    rankPadding: 100,\n    nodePadding: 50,\n    multigraph: true,\n    compound: true,\n  };\n  settings: DagreSettings = {};\n\n  dagreGraph: any;\n  dagreNodes: any;\n  dagreEdges: any;\n\n  run(graph: Graph): Graph {\n    this.createDagreGraph(graph);\n    dagre.layout(this.dagreGraph);\n\n    graph.edgeLabels = this.dagreGraph._edgeLabels;\n\n    for (const dagreNodeId in this.dagreGraph._nodes) {\n      const dagreNode = this.dagreGraph._nodes[dagreNodeId];\n      const node = graph.nodes.find((n) => n.id === dagreNode.id);\n      node.position = {\n        x: dagreNode.x,\n        y: dagreNode.y,\n      };\n      node.width = dagreNode.width;\n      node.height = dagreNode.height;\n    }\n\n    for (const edge of graph.edges) {\n      this.updateEdge(graph, edge);\n    }\n\n    return graph;\n  }\n\n  public updateEdge(graph: Graph, edge: Edge): Graph {\n    const sourceNode = graph.nodes.find((n) => n.id === edge.source);\n    const targetNode: Node = graph.nodes.find((n) => n.id === edge.target);\n    const rankAxis: \"x\" | \"y\" =\n      this.settings.orientation === \"BT\" || this.settings.orientation === \"TB\"\n        ? \"y\"\n        : \"x\";\n    const orderAxis: \"x\" | \"y\" = rankAxis === \"y\" ? \"x\" : \"y\";\n    const rankDimension = rankAxis === \"y\" ? \"height\" : \"width\";\n\n    // determine new arrow position\n    const dir =\n      sourceNode.position[rankAxis] <= targetNode.position[rankAxis] ? -1 : 1;\n    const startingPoint = {\n      [orderAxis]: sourceNode.position[orderAxis],\n      [rankAxis]:\n        sourceNode.position[rankAxis] -\n        dir *\n          ((rankDimension === \"height\" ? sourceNode.height : sourceNode.width) /\n            2),\n    };\n\n    const endingPoint = {\n      [orderAxis]: targetNode.position[orderAxis],\n      [rankAxis]:\n        targetNode.position[rankAxis] +\n        dir *\n          ((rankDimension === \"height\" ? targetNode.height : targetNode.width) /\n            2),\n    };\n\n    // generate new points\n    edge.points = [\n      startingPoint,\n      {\n        [orderAxis]: endingPoint[orderAxis],\n        [rankAxis]: (startingPoint[rankAxis] + endingPoint[rankAxis]) / 2,\n      },\n      endingPoint,\n    ];\n    return graph;\n  }\n\n  createDagreGraph(graph: Graph): any {\n    const settings = Object.assign({}, this.defaultSettings, this.settings);\n    this.dagreGraph = new dagre.graphlib.Graph({\n      compound: settings.compound,\n      multigraph: settings.multigraph,\n    });\n\n    this.dagreGraph.setGraph({\n      rankdir: settings.orientation,\n      marginx: settings.marginX,\n      marginy: settings.marginY,\n      edgesep: settings.edgePadding,\n      ranksep: settings.rankPadding,\n      nodesep: settings.nodePadding,\n      align: settings.align,\n      acyclicer: settings.acyclicer,\n      ranker: settings.ranker,\n      multigraph: settings.multigraph,\n      compound: settings.compound,\n    });\n\n    // Default to assigning a new object as a label for each new edge.\n    this.dagreGraph.setDefaultEdgeLabel(() => {\n      return {\n        /* empty */\n      };\n    });\n\n    this.dagreNodes = graph.nodes.map((n) => {\n      const node: any = Object.assign({}, n);\n      node.width = n.width;\n      node.height = n.height;\n      node.x = n.position.x;\n      node.y = n.position.y;\n      return node;\n    });\n\n    this.dagreEdges = graph.edges.map((l) => {\n      const newLink: any = Object.assign({}, l);\n      if (!newLink.id) {\n        newLink.id = id();\n      }\n      return newLink;\n    });\n\n    for (const node of this.dagreNodes) {\n      if (!node.width) {\n        node.width = 20;\n      }\n      if (!node.height) {\n        node.height = 30;\n      }\n\n      // update dagre\n      this.dagreGraph.setNode(node.id, node);\n    }\n\n    // update dagre\n    for (const edge of this.dagreEdges) {\n      if (settings.multigraph) {\n        this.dagreGraph.setEdge(edge.source, edge.target, edge, edge.id);\n      } else {\n        this.dagreGraph.setEdge(edge.source, edge.target);\n      }\n    }\n\n    return this.dagreGraph;\n  }\n}\n","import React from \"react\";\nimport { Node, Edge } from \"SunGraph/models/graph.model\";\nimport * as shape from \"d3-shape\";\nimport { SunGraph } from \"SunGraph/SunGraph\";\nimport { CustomLayout } from \"./customLayout\";\n\nimport \"./AdvancedGraph.scss\";\n\nexport class AdvancedGraphComponent extends React.Component {\n  public nodes: Node[] = [];\n  public links: Edge[] = [];\n  public curve: any = shape.curveBundle.beta(1);\n\n  constructor(props: any) {\n    super(props);\n    this.nodes = [\n      {\n        id: \"1\",\n        label: \"Node 1\",\n        width: 100,\n        height: 100,\n      },\n      {\n        id: \"2\",\n        label: \"Node 2\",\n        data: {\n          sourceNode: \"1\",\n        },\n        width: 100,\n        height: 100,\n      },\n      {\n        id: \"3\",\n        label: \"Node 3\",\n        data: {\n          sourceNode: \"1\",\n        },\n        width: 50,\n        height: 50,\n        template: (node) => this.singleNodeUIOption1(node),\n      },\n      {\n        id: \"4\",\n        label: \"Node 4\",\n        data: {\n          sourceNode: \"1\",\n        },\n        width: 100,\n        height: 100,\n      },\n      {\n        id: \"5\",\n        label: \"Node 5\",\n        data: {\n          sourceNode: \"4\",\n        },\n        width: 75,\n        height: 75,\n        template: (node) => this.singleNodeUIOption2(node),\n      },\n      {\n        id: \"6\",\n        label: \"Node 6\",\n        data: {\n          sourceNode: \"5\",\n        },\n        width: 100,\n        height: 100,\n      },\n      {\n        id: \"7\",\n        label: \"Node 7\",\n        data: {\n          sourceNode: \"5\",\n        },\n        width: 100,\n        height: 100,\n      },\n      {\n        id: \"8\",\n        label: \"Node 8\",\n        data: {\n          sourceNode: \"5\",\n        },\n        width: 100,\n        height: 100,\n      },\n    ];\n\n    for (const node of this.nodes) {\n      if (!node.data) {\n        continue;\n      }\n\n      const edge: Edge = {\n        source: node.data.sourceNode,\n        target: node.id,\n      };\n\n      this.links.push(edge);\n    }\n\n    this.state = {};\n  }\n\n  public defaultNodeUI(node: Node) {\n    return (\n      <div className=\"container\">\n        <label className=\"title\">{node.label}</label>\n      </div>\n    );\n  }\n\n  public singleNodeUIOption1(node: Node) {\n    return <div className=\"singleNodeContainerOption1\"></div>;\n  }\n\n  public singleNodeUIOption2(node: Node) {\n    return <div className=\"singleNodeContainerOption2\"></div>;\n  }\n\n  render() {\n    return (\n      <SunGraph\n        nodes={this.nodes}\n        links={this.links}\n        curve={this.curve}\n        layout={new CustomLayout()}\n        panningEnabled={true}\n        enableZoom={true}\n        draggingEnabled={true}\n        autoCenter={true}\n        defaultNodeTemplate={(node) => this.defaultNodeUI(node)}\n        clickHandler={() => alert(\"Graph was clicked\")}\n      ></SunGraph>\n    );\n  }\n}\n","import React from \"react\";\nimport {\n  ClippedDrawerAppBar,\n  DrawerAction,\n} from \"../ClippedDrawerAppBar/ClippedDrawerAppBar\";\nimport { BasicGraphComponent } from \"portal/BasicGraph/BasicGraph\";\nimport { DefaultGraph } from \"portal/DefaultGraph/DefaultGraph\";\nimport { GettingStarted } from \"../GettingStarted/GettingStarted\";\nimport { Typography, Link } from \"@material-ui/core\";\nimport { AdvancedGraphComponent } from \"portal/AdvancedGraph/AdvancedGraph\";\n\nimport \"./AppContainer.scss\";\n\nconst DefaultWidth: number = 1200;\n\ninterface State {\n  drawerAction: DrawerAction;\n}\n\nexport class AppContainerComponent extends React.Component<{}, State> {\n  constructor(props: any) {\n    super(props);\n    this.state = { drawerAction: DrawerAction.GettingStarted };\n  }\n\n  render() {\n    const mainClassName: string =\n      \"main \" +\n      (this.state.drawerAction !== DrawerAction.GettingStarted\n        ? \"overflowHide\"\n        : \"\");\n\n    return (\n      <div className=\"appContainer\">\n        <ClippedDrawerAppBar\n          handleDrawerClick={(drawerAction: DrawerAction) =>\n            this.handleDrawerClick(drawerAction)\n          }\n        ></ClippedDrawerAppBar>\n        <div className={mainClassName}>{this.loadDrawerAction()}</div>\n      </div>\n    );\n  }\n\n  public loadDrawerAction() {\n    switch (this.state.drawerAction) {\n      case DrawerAction.Basic: {\n        return (\n          <>\n            <section className=\"graphDescription\">\n              <Typography\n                paragraph\n                variant=\"h4\"\n                style={{ fontSize: 24, fontWeight: 600 }}\n              >\n                ❂ Basic Graph\n              </Typography>\n              <Typography paragraph style={{ width: DefaultWidth }}>\n                The basic graph that sun graph creates with additional features\n                to the default graph template.\n              </Typography>\n              <Typography paragraph style={{ width: DefaultWidth }}>\n                Additional features: zoom, node drag, graph movement, custom\n                node UI.\n              </Typography>\n              <Link\n                href=\"https://github.com/assafsun/sun-graph/blob/master/src/portal/BasicGraph/BasicGraph.tsx\"\n                target=\"_blank\"\n                variant=\"button\"\n                paragraph\n                style={{ width: DefaultWidth }}\n              >\n                Go to code\n              </Link>\n            </section>\n            <BasicGraphComponent></BasicGraphComponent>\n          </>\n        );\n      }\n      case DrawerAction.Advanced: {\n        return (\n          <>\n            <section className=\"graphDescription\">\n              <Typography\n                paragraph\n                variant=\"h4\"\n                style={{ fontSize: 24, fontWeight: 600 }}\n              >\n                ❂ Advanced Graph\n              </Typography>\n              <Typography paragraph style={{ width: DefaultWidth }}>\n                The advanced graph that sun graph creates with additional\n                features to the basic graph.\n              </Typography>\n              <Typography paragraph style={{ width: DefaultWidth }}>\n                Additional features: Layout as an input for building the graph\n                structure, different node shapes.\n              </Typography>\n              <Link\n                href=\"https://github.com/assafsun/sun-graph/blob/master/src/portal/AdvancedGraph/AdvancedGraph.tsx\"\n                target=\"_blank\"\n                variant=\"button\"\n                paragraph\n                style={{ width: DefaultWidth }}\n              >\n                Go to code\n              </Link>\n            </section>\n            <AdvancedGraphComponent></AdvancedGraphComponent>\n          </>\n        );\n      }\n      case DrawerAction.Default: {\n        return (\n          <>\n            <section className=\"graphDescription\">\n              <Typography\n                paragraph\n                variant=\"h4\"\n                style={{ fontSize: 24, fontWeight: 600 }}\n              >\n                ❂ Default Graph\n              </Typography>\n              <Typography paragraph style={{ width: DefaultWidth }}>\n                The default graph that sun graph creates after getting only the\n                user nodes and links inputs.\n              </Typography>\n              <Link\n                href=\"https://github.com/assafsun/sun-graph/blob/master/src/portal/DefaultGraph/DefaultGraph.tsx\"\n                target=\"_blank\"\n                variant=\"button\"\n                paragraph\n                style={{ width: DefaultWidth }}\n              >\n                Go to code\n              </Link>\n            </section>\n            <DefaultGraph></DefaultGraph>\n          </>\n        );\n      }\n      case DrawerAction.GettingStarted:\n      default: {\n        return <GettingStarted></GettingStarted>;\n      }\n    }\n  }\n\n  public handleDrawerClick(drawerAction: DrawerAction): void {\n    this.setState({ drawerAction: drawerAction });\n  }\n}\n","import React from \"react\";\nimport { AppContainerComponent } from \"portal/AppContainer/AppContainer\";\n\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <AppContainerComponent></AppContainerComponent>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}